{"/home/travis/build/npmtest/node-npmtest-favicons-webpack-plugin/test.js":"/* istanbul instrument in package npmtest_favicons_webpack_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-favicons-webpack-plugin/lib.npmtest_favicons_webpack_plugin.js":"/* istanbul instrument in package npmtest_favicons_webpack_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_favicons_webpack_plugin = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_favicons_webpack_plugin = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-favicons-webpack-plugin/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-favicons-webpack-plugin && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_favicons_webpack_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_favicons_webpack_plugin\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_favicons_webpack_plugin.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_favicons_webpack_plugin.rollup.js'] =\n            local.assetsDict['/assets.npmtest_favicons_webpack_plugin.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_favicons_webpack_plugin.__dirname + '/lib.npmtest_favicons_webpack_plugin.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-favicons-webpack-plugin/node_modules/favicons-webpack-plugin/index.js":"'use strict';\nvar childCompiler = require('./lib/compiler.js');\nvar assert = require('assert');\nvar _ = require('lodash');\nvar fs = require('fs');\nvar path = require('path');\n\nfunction FaviconsWebpackPlugin (options) {\n  if (typeof options === 'string') {\n    options = {logo: options};\n  }\n  assert(typeof options === 'object', 'FaviconsWebpackPlugin options are required');\n  assert(options.logo, 'An input file is required');\n  this.options = _.extend({\n    prefix: 'icons-[hash]/',\n    emitStats: false,\n    statsFilename: 'iconstats-[hash].json',\n    persistentCache: true,\n    inject: true,\n    background: '#fff'\n  }, options);\n  this.options.icons = _.extend({\n    android: true,\n    appleIcon: true,\n    appleStartup: true,\n    coast: false,\n    favicons: true,\n    firefox: true,\n    opengraph: false,\n    twitter: false,\n    yandex: false,\n    windows: false\n  }, this.options.icons);\n}\n\nFaviconsWebpackPlugin.prototype.apply = function (compiler) {\n  var self = this;\n  if (!self.options.title) {\n    self.options.title = guessAppName(compiler.context);\n  }\n\n  // Generate the favicons\n  var compilationResult;\n  compiler.plugin('make', function (compilation, callback) {\n    childCompiler.compileTemplate(self.options, compiler.context, compilation)\n      .then(function (result) {\n        compilationResult = result;\n        callback();\n      })\n      .catch(callback);\n  });\n\n  // Hook into the html-webpack-plugin processing\n  // and add the html\n  if (self.options.inject) {\n    compiler.plugin('compilation', function (compilation) {\n      compilation.plugin('html-webpack-plugin-before-html-processing', function (htmlPluginData, callback) {\n        if (htmlPluginData.plugin.options.favicons !== false) {\n          htmlPluginData.html = htmlPluginData.html.replace(\n            /(<\\/head>)/i, compilationResult.stats.html.join('') + '$&');\n          callback(null, htmlPluginData);\n        }\n      });\n    });\n  }\n\n  // Remove the stats from the output if they are not required\n  if (!self.options.emitStats) {\n    compiler.plugin('emit', function (compilation, callback) {\n      delete compilation.assets[compilationResult.outputName];\n      callback();\n    });\n  }\n};\n\n/**\n * Tries to guess the name from the package.json\n */\nfunction guessAppName (compilerWorkingDirectory) {\n  var packageJson = path.resolve(compilerWorkingDirectory, 'package.json');\n  if (!fs.existsSync(packageJson)) {\n    packageJson = path.resolve(compilerWorkingDirectory, '../package.json');\n    if (!fs.existsSync(packageJson)) {\n      return 'Webpack App';\n    }\n  }\n  return JSON.parse(fs.readFileSync(packageJson)).name;\n}\n\nmodule.exports = FaviconsWebpackPlugin;\n","/home/travis/build/npmtest/node-npmtest-favicons-webpack-plugin/node_modules/favicons-webpack-plugin/lib/compiler.js":"'use strict';\nvar path = require('path');\nvar SingleEntryPlugin = require('webpack/lib/SingleEntryPlugin');\n\nmodule.exports.compileTemplate = function compileTemplate (options, context, compilation) {\n  // The entry file is just an empty helper as the dynamic template\n  // require is added in \"loader.js\"\n  var outputOptions = {\n    filename: options.statsFilename,\n    publicPath: compilation.outputOptions.publicPath\n  };\n  // Create an additional child compiler which takes the template\n  // and turns it into an Node.JS html factory.\n  // This allows us to use loaders during the compilation\n  var compilerName = getCompilerName(context, outputOptions.filename);\n  var childCompiler = compilation.createChildCompiler(compilerName, outputOptions);\n  childCompiler.context = context;\n  childCompiler.apply(\n    new SingleEntryPlugin(context, '!!' + require.resolve('./favicons.js') + '?' +\n      JSON.stringify({\n        outputFilePrefix: options.prefix,\n        icons: options.icons,\n        background: options.background,\n        persistentCache: options.persistentCache,\n        appName: options.title\n      }) + '!' + options.logo)\n  );\n\n  // Fix for \"Uncaught TypeError: __webpack_require__(...) is not a function\"\n  // Hot module replacement requires that every child compiler has its own\n  // cache. @see https://github.com/ampedandwired/html-webpack-plugin/pull/179\n  childCompiler.plugin('compilation', function (compilation) {\n    if (compilation.cache) {\n      if (!compilation.cache[compilerName]) {\n        compilation.cache[compilerName] = {};\n      }\n      compilation.cache = compilation.cache[compilerName];\n    }\n    compilation.plugin('optimize-chunk-assets', function (chunks, callback) {\n      if (!chunks[0]) {\n        return callback(compilation.errors[0] || 'Favicons generation failed');\n      }\n      var resultFile = chunks[0].files[0];\n      var resultCode = compilation.assets[resultFile].source();\n      var resultJson;\n      try {\n        /*eslint no-eval:0 */\n        var result = eval(resultCode);\n        resultJson = JSON.stringify(result);\n      } catch (e) {\n        return callback(e);\n      }\n      compilation.assets[resultFile] = {\n        source: function () {\n          return resultJson;\n        },\n        size: function () {\n          return resultJson.length;\n        }\n      };\n      callback(null);\n    });\n  });\n\n  // Compile and return a promise\n  return new Promise(function (resolve, reject) {\n    childCompiler.runAsChild(function (err, entries, childCompilation) {\n      if (err) {\n        return reject(err);\n      }\n      // Replace [hash] placeholders in filename\n      var outputName = compilation.mainTemplate.applyPluginsWaterfall('asset-path', outputOptions.filename, {\n        hash: childCompilation.hash,\n        chunk: entries[0]\n      });\n      // Resolve / reject the promise\n      if (childCompilation && childCompilation.errors && childCompilation.errors.length) {\n        var errorDetails = childCompilation.errors.map(function (error) {\n          return error.message + (error.error ? ':\\n' + error.error : '');\n        }).join('\\n');\n        reject(new Error('Child compilation failed:\\n' + errorDetails));\n      } else if (err) {\n        reject(err);\n      } else {\n        resolve({\n          outputName: outputName,\n          stats: JSON.parse(childCompilation.assets[outputName].source())\n        });\n      }\n    });\n  });\n};\n\n/**\n * Returns the child compiler name e.g. 'html-webpack-plugin for \"index.html\"'\n */\nfunction getCompilerName (context, filename) {\n  var absolutePath = path.resolve(context, filename);\n  var relativePath = path.relative(context, absolutePath);\n  return 'favicons-webpack-plugin for \"' + (absolutePath.length < relativePath.length ? absolutePath : relativePath) + '\"';\n}\n","/home/travis/build/npmtest/node-npmtest-favicons-webpack-plugin/node_modules/favicons-webpack-plugin/lib/cache.js":"/**\n * @file this file is responsible for the persitance disk caching\n * it offers helpers to prevent recompilation of the favicons on\n * every build\n */\n'use strict';\nvar fs = require('fs');\nvar path = require('path');\nvar crypto = require('crypto');\nvar pluginVersion = require('../package.json').version;\n\n/**\n * Stores the given iconResult together with the control hashes as JSON file\n */\nfunction emitCacheInformationFile (loader, query, cacheFile, fileHash, iconResult) {\n  if (!query.persistentCache) {\n    return;\n  }\n  loader.emitFile(cacheFile, JSON.stringify({\n    hash: fileHash,\n    version: pluginVersion,\n    optionHash: generateHashForOptions(query),\n    result: iconResult\n  }));\n}\n\n/**\n * Checks if the given cache object is still valid\n */\nfunction isCacheValid (cache, fileHash, query) {\n  // Verify that the source file is the same\n  return cache.hash === fileHash &&\n    // Verify that the options are the same\n    cache.optionHash === generateHashForOptions(query) &&\n    // Verify that the favicons version of the cache maches this version\n    cache.version === pluginVersion;\n}\n\n/**\n * Try to load the file from the disc cache\n */\nfunction loadIconsFromDiskCache (loader, query, cacheFile, fileHash, callback) {\n  // Stop if cache is disabled\n  if (!query.persistentCache) return callback(null);\n  var resolvedCacheFile = path.resolve(__dirname, loader._compiler.parentCompilation.compiler.outputPath, cacheFile);\n\n  fs.exists(resolvedCacheFile, function (exists) {\n    if (!exists) return callback(null);\n    fs.readFile(resolvedCacheFile, function (err, content) {\n      if (err) return callback(err);\n      var cache;\n      try {\n        cache = JSON.parse(content);\n        // Bail out if the file or the option changed\n        if (!isCacheValid(cache, fileHash, query)) {\n          return callback(null);\n        }\n      } catch (e) {\n        return callback(e);\n      }\n      callback(null, cache.result);\n    });\n  });\n}\n\n/**\n * Generates a md5 hash for the given options\n */\nfunction generateHashForOptions (options) {\n  var hash = crypto.createHash('md5');\n  hash.update(JSON.stringify(options));\n  return hash.digest('hex');\n}\n\nmodule.exports = {\n  loadIconsFromDiskCache: loadIconsFromDiskCache,\n  emitCacheInformationFile: emitCacheInformationFile\n};\n","/home/travis/build/npmtest/node-npmtest-favicons-webpack-plugin/node_modules/favicons-webpack-plugin/lib/favicons.js":"'use strict';\nvar loaderUtils = require('loader-utils');\nvar favicons = require('favicons/es5');\nvar faviconPersitenceCache = require('./cache');\n\nmodule.exports = function (content) {\n  var self = this;\n  self.cacheable && this.cacheable();\n  if (!self.emitFile) throw new Error('emitFile is required from module system');\n  if (!self.async) throw new Error('async is required');\n\n  var callback = self.async();\n  var query = loaderUtils.parseQuery(self.query);\n  var pathPrefix = loaderUtils.interpolateName(self, query.outputFilePrefix, {\n    context: query.context || this.options.context,\n    content: content,\n    regExp: query.regExp\n  });\n  var fileHash = loaderUtils.interpolateName(self, '[hash]', {\n    context: query.context || this.options.context,\n    content: content,\n    regExp: query.regExp\n  });\n  var cacheFile = pathPrefix + '.cache';\n  faviconPersitenceCache.loadIconsFromDiskCache(self, query, cacheFile, fileHash, function (err, cachedResult) {\n    if (err) return callback(err);\n    if (cachedResult) {\n      return callback(null, 'module.exports = ' + JSON.stringify(cachedResult));\n    }\n    // Generate icons\n    generateIcons(self, content, pathPrefix, query, function (err, iconResult) {\n      if (err) return callback(err);\n      faviconPersitenceCache.emitCacheInformationFile(self, query, cacheFile, fileHash, iconResult);\n      callback(null, 'module.exports = ' + JSON.stringify(iconResult));\n    });\n  });\n};\n\nfunction getPublicPath (compilation) {\n  var publicPath = compilation.outputOptions.publicPath || '';\n  if (publicPath.length && publicPath.substr(-1) !== '/') {\n    publicPath += '/';\n  }\n  return publicPath;\n}\n\nfunction generateIcons (loader, imageFileStream, pathPrefix, query, callback) {\n  var publicPath = getPublicPath(loader._compilation);\n  favicons(imageFileStream, {\n    path: '',\n    url: '',\n    icons: query.icons,\n    background: query.background,\n    appName: query.appName\n  }, function (err, result) {\n    if (err) return callback(err);\n    var html = result.html.filter(function (entry) {\n      return entry.indexOf('manifest') === -1;\n    })\n    .map(function (entry) {\n      return entry.replace(/(href=[\"\"])/g, '$1' + publicPath + pathPrefix);\n    });\n    var loaderResult = {\n      outputFilePrefix: pathPrefix,\n      html: html,\n      files: []\n    };\n    result.images.forEach(function (image) {\n      loaderResult.files.push(pathPrefix + image.name);\n      loader.emitFile(pathPrefix + image.name, image.contents);\n    });\n    result.files.forEach(function (file) {\n      loaderResult.files.push(pathPrefix + file.name);\n      loader.emitFile(pathPrefix + file.name, file.contents);\n    });\n    callback(null, loaderResult);\n  });\n}\n\nmodule.exports.raw = true;\n"}